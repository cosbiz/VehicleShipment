@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">VehicleShipment</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        @if (isLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="weather">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to changes in the authentication state
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Get the current authentication state
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Set isLoggedIn to true if the user is authenticated
        isLoggedIn = user.Identity?.IsAuthenticated == true;

        // Re-render the component
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        // Update authentication state when it changes
        InvokeAsync(async () =>
        {
            await CheckAuthenticationState();
        });
    }

    public void Dispose()
    {
        // Unsubscribe from AuthenticationStateChanged when the component is disposed
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
