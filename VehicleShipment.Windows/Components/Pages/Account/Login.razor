@page "/login"
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject IAccountService AccountService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Login</h1>

<div class="alert alert-info">
    Please enter your login credentials.
</div>

<EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="alert alert-danger" hidden="@loginModel.LoginFailureHidden">
        Invalid login attempt, please try again.
    </div>

    <div class="form-group">
        <label>Username</label>
        <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
    </div>

    <div class="form-group mt-1">
        <button type="submit" class="btn btn-primary w-100">Login Now</button>
    </div>
</EditForm>

@code {
    private LoginViewModel loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        // Get the current authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // If the user is already authenticated, redirect to home page
        if (user.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        // Verify credentials using the accountService
        var verify = await AccountService.VerifyUser(loginModel.Username, loginModel.Password);

        // If verification is not successful, return and don't proceed with login
        if (!verify.IsSuccess)
        {
            loginModel.LoginFailureHidden = false; // Show error message if login fails
            return;
        }

        // Check if the account is confirmed
        if (!verify.IsConfirmed)
        {
            // Redirect to password change page if account is not confirmed
            Navigation.NavigateTo($"/account/changepassword/{loginModel.Username}");
            return;
        }

        // Call the login method from CustomAuthenticationStateProvider if verification is successful
        var token = await AuthStateProvider.Login(loginModel.Username, loginModel.Password);

        if (token != null)
        {
            // If login is successful, redirect to the homepage or a protected page
            Navigation.NavigateTo("/");
        }
        else
        {
            // Show error message if login fails
            loginModel.LoginFailureHidden = false;
        }
    }
}
